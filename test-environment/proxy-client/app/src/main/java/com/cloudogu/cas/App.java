/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.cloudogu.cas;

import org.eclipse.jetty.server.Connector;
import org.eclipse.jetty.server.HttpConfiguration;
import org.eclipse.jetty.server.HttpConnectionFactory;
import org.eclipse.jetty.server.SecureRequestCustomizer;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.server.ServerConnector;
import org.eclipse.jetty.server.SslConnectionFactory;
import org.eclipse.jetty.server.session.SessionHandler;
import org.eclipse.jetty.servlet.FilterHolder;
import org.eclipse.jetty.servlet.FilterMapping;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.servlet.ServletHandler;
import org.eclipse.jetty.util.ssl.SslContextFactory;
import org.jasig.cas.client.authentication.AuthenticationFilter;
import org.jasig.cas.client.util.HttpServletRequestWrapperFilter;
import org.jasig.cas.client.validation.Cas30ProxyReceivingTicketValidationFilter;

public class App {

    public static void main(String[] args) throws Exception {
      System.setProperty("javax.net.ssl.trustStore", "../cas-overlay/etc/cas/thekeystore");
      System.setProperty("javax.net.ssl.trustStorePassword", "changeit");

      Server server = new Server();

      SslContextFactory sslContextFactory = new SslContextFactory.Server();
      sslContextFactory.setKeyStorePath("../cas-overlay/etc/cas/trustStore.jks");
      sslContextFactory.setKeyStorePassword("changeit");
      sslContextFactory.setKeyManagerPassword("changeit");
      sslContextFactory.setCertAlias("selfsigned");

      HttpConfiguration https = new HttpConfiguration();
      https.addCustomizer(new SecureRequestCustomizer());

      ServerConnector sslConnector = new ServerConnector(server,
        new SslConnectionFactory(sslContextFactory, "http/1.1"),
        new HttpConnectionFactory(https)
      );
      sslConnector.setPort(8900);
      server.setConnectors(new Connector[] {sslConnector});

      ServletHandler servletHandler = new ServletHandler();

      addAuthenticationFilter(servletHandler);
      addValidationFilter(servletHandler);
      addRequestWrapperFilter(servletHandler);

      servletHandler.addServletWithMapping(GreetingServlet.class, "/greeting");

      ServletContextHandler webapp = new ServletContextHandler(ServletContextHandler.SESSIONS);
      webapp.setSessionHandler(new SessionHandler());
      webapp.setServletHandler(servletHandler);
      server.setHandler(webapp);

      server.start();
    }

  private static void addRequestWrapperFilter(ServletHandler servletHandler) {
    FilterHolder filterHolder = new FilterHolder(HttpServletRequestWrapperFilter.class);
    filterHolder.setName("wrapperFilter");

    FilterMapping filterMapping = new FilterMapping();
    filterMapping.setFilterName("wrapperFilter");
    filterMapping.setPathSpec("/*");

    servletHandler.addFilter(filterHolder, filterMapping);
  }

  private static void addValidationFilter(ServletHandler servletHandler) {
    FilterHolder filterHolder = new FilterHolder(Cas30ProxyReceivingTicketValidationFilter.class);
    filterHolder.setName("validationFilter");
    filterHolder.setInitParameter("casServerUrlPrefix", "https://cas.hitchhiker.com:8443/cas");
    filterHolder.setInitParameter("serverName", "https://scm.hitchhiker.com:8900");
    filterHolder.setInitParameter("proxyCallbackUrl", "https://scm.hitchhiker.com:8900/pgCallback");
    filterHolder.setInitParameter("acceptAnyProxy", "true");
    filterHolder.setInitParameter("proxyReceptorUrl", "/pgCallback");

    FilterMapping filterMapping = new FilterMapping();
    filterMapping.setFilterName("validationFilter");
    filterMapping.setPathSpec("/*");

    servletHandler.addFilter(filterHolder, filterMapping);
  }

  private static void addAuthenticationFilter(ServletHandler servletHandler) {
    FilterHolder filterHolder = new FilterHolder(AuthenticationFilter.class);
    filterHolder.setName("authenticationFilter");
    filterHolder.setInitParameter("casServerUrlPrefix", "https://cas.hitchhiker.com:8443/cas");
    filterHolder.setInitParameter("serverName", "https://scm.hitchhiker.com:8900");

    FilterMapping filterMapping = new FilterMapping();
    filterMapping.setFilterName("authenticationFilter");
    filterMapping.setPathSpec("/greeting");

    servletHandler.addFilter(filterHolder, filterMapping);
  }
}
